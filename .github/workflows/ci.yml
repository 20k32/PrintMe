name: Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache frontend build
        uses: actions/cache@v3
        with:
          path: |
            printme.client/node_modules
            printme.client/dist
          key: ${{ runner.os }}-frontend-${{ hashFiles('**/printme.client/**') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      - name: Check for frontend code changes
        id: check_frontend_changes
        run: |
          FRONTEND_CHANGED=false
          git diff --exit-code --quiet -- ./printme.client || FRONTEND_CHANGED=true
          echo "frontend_changed=$FRONTEND_CHANGED" >> $GITHUB_ENV

      - name: Download frontend artifact if exists
        if: env.frontend_changed != 'true' && steps.cache-frontend.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v3
        with:
          name: printme-client-artifact
          path: ./printme.client/build

      - name: Build frontend from scratch
        if: env.frontend_changed == 'true' || steps.cache-frontend.outputs.cache-hit != 'true'
        run: |
          cd printme.client
          npm install
          npm run build
          # Save the build artifact
          mkdir -p build
          cp -R dist/* build/
          echo "Frontend built and artifact saved"
      
      - name: Upload frontend build artifact
        if: env.frontend_changed == 'true' || steps.cache-frontend.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v3
        with:
          name: printme-client-artifact
          path: ./printme.client/build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create environment files
        run: |
          cat > ./.env << EOF
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          EOF
          
          cat > ./PrintMe.Server/.env << EOF
          CONNECTION_STRING_PRINTME_DB=Host=postgres;Port=5432;Database=${{ secrets.POSTGRES_DB }};Username=${{ secrets.POSTGRES_USER }};Password=${{ secrets.POSTGRES_PASSWORD }}          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EOF
          
          cat > ./PrintMe.Client/.env << EOF
          VITE_GOOGLE_MAPS_API_KEY=${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}
          EOF

      - name: Start PostgreSQL and Backend
        run: |
          docker compose up -d postgres
          docker compose up --build -d printme-server
          # docker compose exec -T printme-server dotnet ef database update

      - name: Run backend tests
        run: |
          docker compose up --build -d printme-server-tests
          docker compose up --build --exit-code-from printme-server-tests printme-server-tests
          
      - name: Stop and remove containers
        run: docker compose down
